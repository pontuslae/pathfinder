#!/bin/bash
#
# Test framework for running tests in pathtracer/tests/.
# tests are evaluated line by line and can not require several line context.
# Input: Optional name filter. To run a specific test e.g. tests/travis , run './test_Framework travis'
# Output is formatted in a matrix where each row is a test file and each column is a command ran.
#


usage() {
    echo "Usage: $0 Filter test case: [-filter <test name>] [-d] [-h]" 1>&2;
    exit 1;
}

while getopts ":s:p:" o; do
    case "${o}" in
        filter)
            filter=${OPTARG}
            ;;
        d)
            d=true
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [ -z "$REPOROOT" ]; then
    source $(git rev-parse --show-toplevel)/env/script/utils/setup
fi

cd $REPOROOT
filter=$1
dry_run=$2
env_location="$REPOROOT/.cache"

if [ ! -z "${d}" ]; then
    cargo() {
        echo "$@" > /dev/null
    }
    export -f cargo
fi

env_file() {
    mkdir -p "$env_location"
    for name in $@; do
        eval "PATH_$name=$env_location/.$name"
        eval "export PATH_$name"
        eval "echo > \$PATH_$name"
    done
}

env_print() {
    for name in $@; do
        eval "cat \$(echo -e \$PATH_$name)"
    done
}

eval() {
    echo -e "\e[94m$@\e[0m"
    builtin eval "$@"
}
export -f eval

execute() {
    file=$1
    shift
    line=$@

    echo -e "$file - $line" >> "$PATH_executed"
    eval "$line"
}
export -f execute

run() {
    file=$1
    shift
    line=$@

    line_ns="$(echo -e ${line} | tr -d '[:space:]')"
    if [[ "$(cat $PATH_ignored)" == *"$line_ns"* ]]; then
        echo -e "$file - $IGNORED\n$line" >> $PATH_ignored
        return
    fi

    if [[ "$line" == *"| bash" ]]; then
        line="${line/| bash/| xargs -I \{\} bash -c \'run ${file}_job \$@\' _ {}}"
    fi

    echo "$line_nospaces" >> $PATH_executed_ns
    execute "$file" "$line"
}
export -f run

init() {
    for f in $REPOROOT/env/tests/${filter}*; do
        MATRIX="$MATRIX\n$(basename $f)"
        while read -r l; do
            [ ! -z "$l" ] && run "$(basename $f)" "$l"
        done <$f
    done
}

env_file "executed" "ignored" "executed_ns"
init
env_print "executed" "ignored"

